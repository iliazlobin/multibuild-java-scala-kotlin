buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = "https://repo.spring.io/plugins-release" }
        maven { url = "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("gradle.plugin.com.dorongold.plugins:task-tree:1.3")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${project.properties['kotlin.version']}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${project.properties['kotlin.version']}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE")
    }
}

apply {
    plugin("com.dorongold.task-tree")
    plugin("kotlin-platform-jvm")
    plugin("org.springframework.boot")
    plugin("kotlin-spring")
    plugin("io.spring.dependency-management")
    plugin("scala")
    plugin("maven-publish")
    plugin("ivy-publish")
}

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url = "https://repo.spring.io/milestone" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.0.0.M7"
        mavenBom "io.projectreactor:reactor-bom:Bismuth-RELEASE"
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url "http://192.168.0.201:58010/repository/niias-maven-releases/"
        credentials {
            username "${nexusUsername}"
            password "${nexusPassword}"
        }
    }
    maven {
        url "http://192.168.0.201:58010/repository/niias-maven-snapshots/"
        credentials {
            username "${nexusUsername}"
            password "${nexusPassword}"
        }
    }
    ivy {
        url "file://${System.properties['user.home']}/.ivy2/local"
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
        }
    }
    ivy {
        url "http://192.168.0.201:58010/repository/niias-ivy-snapshots/"
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
        }
        credentials {
            username "${nexusUsername}"
            password "${nexusPassword}"
        }
    }
    ivy {
        url "http://192.168.0.201:58010/repository/niias-ivy-releases/"
        layout 'pattern', {
            artifact '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
            ivy '[organisation]/[module]/[revision]/[type]s/[artifact](-[classifier])(.[ext])'
        }
        credentials {
            username "${nexusUsername}"
            password "${nexusPassword}"
        }
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    // logging
    compile("ch.qos.logback:logback-classic:1.2.3")

    // scala
    compile "org.scala-lang:scala-library:2.12.2"

    // kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    // spring
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework:spring-core")
    compile("org.springframework:spring-test")

    testCompile('org.springframework.boot:spring-boot-starter-test')

    // utils
    compile("io.vavr:vavr-kotlin:0.9.2") {
        exclude module: "kotlin-stdlib-jre8"
    }
    compile("io.netty:netty-all:4.1.9.Final")
    compile("io.projectreactor:reactor-core")

    // net-transport
    compile("niias.utils:reactor-socket:2.0-SNAPSHOT")

    // test
    testCompile("org.mockito:mockito-core:2.+")
    testCompile("org.junit.jupiter:junit-jupiter-api")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 0, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

compileJava {
    options.compilerArgs += ["-Xlint:unchecked"]
}
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-deprecation",
        "-encoding", "UTF-8",
        "-feature",
        "-unchecked",
//            "-Ywarn-adapted-args",
        "-Ywarn-dead-code",
        "-Ywarn-value-discard",
//            "-Ylog-classpath",
    ]
}

sourceSets {
//    main.kotlin.srcDirs += main.java.srcDirs
    main.kotlin.srcDir "src/main/java"
//    main.scala.srcDir "src/main/java"
    main.java.srcDirs = []
}

classes.dependsOn = classes.taskDependencies.values - "compileScala"
compileScala.dependsOn = compileScala.taskDependencies.values - "compileJava"

//compileJava.dependsOn compileScala
//compileJava.classpath += files(compileKotlin.destinationDir)

//compileJava.dependsOn compileKotlin.taskDependencies
//compileJava.classpath += files(compileKotlin.destinationDir)

compileKotlin.dependsOn compileScala
compileKotlin.classpath += files(compileScala.destinationDir)
//classes.dependsOn compileScala

taskTree {
    noRepeat = true
    impliesSubProjects = true
}

task viewSS << {
    sourceSets {
        main {
            println "java.srcDirs = ${java.srcDirs}"
            println "java.files = ${java.files.name}"
            println "kotlin.srcDirs = ${kotlin.srcDirs}"
            println "kotlin.files = ${kotlin.files.name}"
            println "scala.srcDirs = ${scala.srcDirs}"
            println "scala.files = ${scala.files.name}"
            println "resources.srcDirs = ${resources.srcDirs}"
            println "allJava.files = ${allJava.files.name}"
            println "allJava.files = ${allScala.files.name}"
            println "resources.files = ${resources.files.name}"
            println "allSource.files = ${allSource.files.name}"
            println "output.classesDir = ${output.classesDir}"
            println "output.resourcesDir = ${output.resourcesDir}"
            println "output.files = ${output.files}"
        }
    }
}
